/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.gtp.base.db.jooq.generated.tables;


import io.surati.gap.gtp.base.db.jooq.generated.Keys;
import io.surati.gap.gtp.base.db.jooq.generated.Public;
import io.surati.gap.gtp.base.db.jooq.generated.tables.records.GtpTreasuryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GtpTreasury extends TableImpl<GtpTreasuryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.gtp_treasury</code>
     */
    public static final GtpTreasury GTP_TREASURY = new GtpTreasury();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GtpTreasuryRecord> getRecordType() {
        return GtpTreasuryRecord.class;
    }

    /**
     * The column <code>public.gtp_treasury.id</code>.
     */
    public final TableField<GtpTreasuryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.gtp_treasury.representative</code>.
     */
    public final TableField<GtpTreasuryRecord, String> REPRESENTATIVE = createField(DSL.name("representative"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.gtp_treasury.representative_position</code>.
     */
    public final TableField<GtpTreasuryRecord, String> REPRESENTATIVE_POSITION = createField(DSL.name("representative_position"), SQLDataType.VARCHAR(25), this, "");

    private GtpTreasury(Name alias, Table<GtpTreasuryRecord> aliased) {
        this(alias, aliased, null);
    }

    private GtpTreasury(Name alias, Table<GtpTreasuryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.gtp_treasury</code> table reference
     */
    public GtpTreasury(String alias) {
        this(DSL.name(alias), GTP_TREASURY);
    }

    /**
     * Create an aliased <code>public.gtp_treasury</code> table reference
     */
    public GtpTreasury(Name alias) {
        this(alias, GTP_TREASURY);
    }

    /**
     * Create a <code>public.gtp_treasury</code> table reference
     */
    public GtpTreasury() {
        this(DSL.name("gtp_treasury"), null);
    }

    public <O extends Record> GtpTreasury(Table<O> child, ForeignKey<O, GtpTreasuryRecord> key) {
        super(child, key, GTP_TREASURY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<GtpTreasuryRecord> getPrimaryKey() {
        return Keys.GTP_TREASURY_PKEY;
    }

    @Override
    public List<UniqueKey<GtpTreasuryRecord>> getKeys() {
        return Arrays.<UniqueKey<GtpTreasuryRecord>>asList(Keys.GTP_TREASURY_PKEY);
    }

    @Override
    public GtpTreasury as(String alias) {
        return new GtpTreasury(DSL.name(alias), this);
    }

    @Override
    public GtpTreasury as(Name alias) {
        return new GtpTreasury(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GtpTreasury rename(String name) {
        return new GtpTreasury(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GtpTreasury rename(Name name) {
        return new GtpTreasury(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
