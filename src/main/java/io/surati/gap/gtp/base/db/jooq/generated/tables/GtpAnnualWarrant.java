/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.gtp.base.db.jooq.generated.tables;


import io.surati.gap.gtp.base.db.jooq.generated.Keys;
import io.surati.gap.gtp.base.db.jooq.generated.Public;
import io.surati.gap.gtp.base.db.jooq.generated.tables.records.GtpAnnualWarrantRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GtpAnnualWarrant extends TableImpl<GtpAnnualWarrantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.gtp_annual_warrant</code>
     */
    public static final GtpAnnualWarrant GTP_ANNUAL_WARRANT = new GtpAnnualWarrant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GtpAnnualWarrantRecord> getRecordType() {
        return GtpAnnualWarrantRecord.class;
    }

    /**
     * The column <code>public.gtp_annual_warrant.id</code>.
     */
    public final TableField<GtpAnnualWarrantRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.gtp_annual_warrant.fiscal_year</code>.
     */
    public final TableField<GtpAnnualWarrantRecord, Short> FISCAL_YEAR = createField(DSL.name("fiscal_year"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.gtp_annual_warrant.no</code>.
     */
    public final TableField<GtpAnnualWarrantRecord, Integer> NO = createField(DSL.name("no"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.gtp_annual_warrant.annual_amount_to_pay</code>.
     */
    public final TableField<GtpAnnualWarrantRecord, Double> ANNUAL_AMOUNT_TO_PAY = createField(DSL.name("annual_amount_to_pay"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.gtp_annual_warrant.annual_amount_paid</code>.
     */
    public final TableField<GtpAnnualWarrantRecord, Double> ANNUAL_AMOUNT_PAID = createField(DSL.name("annual_amount_paid"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.gtp_annual_warrant.annual_amount_left</code>.
     */
    public final TableField<GtpAnnualWarrantRecord, Double> ANNUAL_AMOUNT_LEFT = createField(DSL.name("annual_amount_left"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.gtp_annual_warrant.is_split</code>.
     */
    public final TableField<GtpAnnualWarrantRecord, Boolean> IS_SPLIT = createField(DSL.name("is_split"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private GtpAnnualWarrant(Name alias, Table<GtpAnnualWarrantRecord> aliased) {
        this(alias, aliased, null);
    }

    private GtpAnnualWarrant(Name alias, Table<GtpAnnualWarrantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.gtp_annual_warrant</code> table reference
     */
    public GtpAnnualWarrant(String alias) {
        this(DSL.name(alias), GTP_ANNUAL_WARRANT);
    }

    /**
     * Create an aliased <code>public.gtp_annual_warrant</code> table reference
     */
    public GtpAnnualWarrant(Name alias) {
        this(alias, GTP_ANNUAL_WARRANT);
    }

    /**
     * Create a <code>public.gtp_annual_warrant</code> table reference
     */
    public GtpAnnualWarrant() {
        this(DSL.name("gtp_annual_warrant"), null);
    }

    public <O extends Record> GtpAnnualWarrant(Table<O> child, ForeignKey<O, GtpAnnualWarrantRecord> key) {
        super(child, key, GTP_ANNUAL_WARRANT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<GtpAnnualWarrantRecord> getPrimaryKey() {
        return Keys.GTP_ANNUAL_WARRANT_PKEY;
    }

    @Override
    public List<UniqueKey<GtpAnnualWarrantRecord>> getKeys() {
        return Arrays.<UniqueKey<GtpAnnualWarrantRecord>>asList(Keys.GTP_ANNUAL_WARRANT_PKEY);
    }

    @Override
    public List<ForeignKey<GtpAnnualWarrantRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GtpAnnualWarrantRecord, ?>>asList(Keys.GTP_ANNUAL_WARRANT__GTP_ANNUAL_WARRANT_ID_FKEY);
    }

    private transient GtpWarrant _gtpWarrant;

    public GtpWarrant gtpWarrant() {
        if (_gtpWarrant == null)
            _gtpWarrant = new GtpWarrant(this, Keys.GTP_ANNUAL_WARRANT__GTP_ANNUAL_WARRANT_ID_FKEY);

        return _gtpWarrant;
    }

    @Override
    public GtpAnnualWarrant as(String alias) {
        return new GtpAnnualWarrant(DSL.name(alias), this);
    }

    @Override
    public GtpAnnualWarrant as(Name alias) {
        return new GtpAnnualWarrant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GtpAnnualWarrant rename(String name) {
        return new GtpAnnualWarrant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GtpAnnualWarrant rename(Name name) {
        return new GtpAnnualWarrant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Short, Integer, Double, Double, Double, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
