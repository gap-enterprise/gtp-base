<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<!--
Copyright (c) 2022 Surati

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to read
the Software only. Permissions is hereby NOT GRANTED to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd">
  <changeSet author="baudoliver7" id="001" context="base">
    <sql>
      CREATE TABLE gtp_treasury (
        id BIGINT PRIMARY KEY,
        representative character varying(100),
        representative_position character varying(100),
        CONSTRAINT gtp_treasury_id_fkey FOREIGN KEY (id) REFERENCES pay_third_party (id)
        ON UPDATE CASCADE ON DELETE CASCADE
      );

      CREATE VIEW gtp_treasury_view AS
        SELECT
          tp.*,
          tr.representative,
          tr.representative_position
        FROM gtp_treasury tr
        LEFT JOIN pay_third_party_view tp ON tp.id = tr.id;


      CREATE TABLE gtp_bundle (
        code character varying(10) PRIMARY KEY,
        notes character varying(250)
      );

      CREATE TABLE gtp_section (
        code character varying(10) PRIMARY KEY,
        name character varying(200) NOT NULL,
        notes character varying(250)
      );

      CREATE TABLE gtp_title (
        code character varying(10) PRIMARY KEY,
        name character varying(200) NOT NULL,
        notes character varying(250)
      );

      CREATE TABLE gtp_chapter (
        code character varying(10) PRIMARY KEY,
        name character varying(200) NOT NULL,
        notes character varying(250)
      );

      CREATE TABLE gtp_sub_chapter (
        code character varying(10) PRIMARY KEY,
        name character varying(200) NOT NULL,
        notes character varying(250)
      );

      CREATE TABLE gtp_region (
        code character varying(10) PRIMARY KEY,
        name character varying(200) NOT NULL,
        notes character varying(250)
      );

      CREATE TABLE gtp_line (
        code character varying(10) PRIMARY KEY,
        name character varying(200) NOT NULL,
        notes character varying(250)
      );

      CREATE TABLE gtp_account_pec (
        code character varying(10) PRIMARY KEY,
        name character varying(200) NOT NULL,
        notes character varying(250)
      );

      CREATE TABLE gtp_warrant (
        id BIGINT PRIMARY KEY,
        treasury_id BIGINT NOT NULL,
        gross double precision NOT NULL,
        deduction double precision NOT NULL,
        debit_account_pec character varying(25),
        credit_account_pec character varying(25),
        date_pec date,
        title character varying(10) NOT NULL,
        section character varying(10) NOT NULL,
        chapter character varying(10) NOT NULL,
        sub_chapter character varying(10) NOT NULL,
        line character varying(10) NOT NULL,
        bundle character varying(10) NOT NULL,
        region character varying(10) NOT NULL,
        imputation character varying(50) NOT NULL,
        CONSTRAINT gtp_warrant_id_fkey FOREIGN KEY (id) REFERENCES pay_reference_document (id)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_treasury_id_fkey FOREIGN KEY (treasury_id) REFERENCES gtp_treasury (id)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_debit_account_pec_fkey FOREIGN KEY (debit_account_pec) REFERENCES gtp_account_pec (code)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_credit_account_pec_fkey FOREIGN KEY (credit_account_pec) REFERENCES gtp_account_pec (code)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_title_fkey FOREIGN KEY (title) REFERENCES gtp_title (code)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_section_fkey FOREIGN KEY (section) REFERENCES gtp_section (code)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_chapter_fkey FOREIGN KEY (chapter) REFERENCES gtp_chapter (code)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_sub_chapter_fkey FOREIGN KEY (sub_chapter) REFERENCES gtp_sub_chapter (code)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_sub_line_fkey FOREIGN KEY (line) REFERENCES gtp_line (code)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_bundle_fkey FOREIGN KEY (bundle) REFERENCES gtp_bundle (code)
          ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT gtp_warrant_region_fkey FOREIGN KEY (region) REFERENCES gtp_region (code)
          ON UPDATE CASCADE ON DELETE CASCADE
      );

      CREATE VIEW gtp_warrant_view AS
        SELECT rd.*,
          wr.treasury_id,
          wr.gross,
          wr.deduction,
          wr.debit_account_pec,
          wr.credit_account_pec,
          wr.date_pec,
          wr.title,
          wr.section,
          wr.chapter,
          wr.sub_chapter,
          wr.line,
          wr.bundle,
          wr.region,
          wr.imputation
        FROM gtp_warrant wr
        LEFT JOIN pay_reference_document_view rd ON rd.id = wr.id;

      CREATE TABLE gtp_annual_warrant (
        id bigint NOT NULL,
        fiscal_year smallint NOT NULL,
        no integer NOT NULL,
        annual_amount_to_pay DOUBLE PRECISION NOT NULL,
        annual_amount_paid DOUBLE PRECISION NOT NULL,
        annual_amount_left DOUBLE PRECISION NOT NULL,
        is_split BOOLEAN NOT NULL,
        CONSTRAINT gtp_annual_warrant_pkey PRIMARY KEY (id, fiscal_year),
        CONSTRAINT gtp_annual_warrant_id_fkey FOREIGN KEY (id) REFERENCES gtp_warrant (id)
          ON UPDATE CASCADE ON DELETE CASCADE
      );

      CREATE VIEW gtp_annual_warrant_view AS
        SELECT
          wr.*,
          awr.no,
          awr.fiscal_year,
          awr.annual_amount_to_pay,
          awr.annual_amount_paid,
          awr.annual_amount_left,
          awr.is_split
        FROM gtp_annual_warrant awr
        LEFT JOIN gtp_warrant_view wr ON wr.id = awr.id
        ORDER BY wr.id;
    </sql>
    <sql dbms="postgresql"><![CDATA[
		CREATE OR REPLACE FUNCTION gtp_func_update_annual_warrant() RETURNS trigger AS
		'
		DECLARE
			cur_year smallint;
			cur_no integer;
			cur_is_split boolean;
			cur_warrant_id bigint;
			cur_total_amount double precision;
			cur_amount_paid_before double precision;
		    cur_annual_amount_to_pay double precision;
		    cur_annual_amount_paid double precision;
		    cur_annual_amount_left double precision;
		BEGIN
		    IF NEW.reference_document_id IS NULL THEN
		    	RETURN NEW;
		    END IF;
			cur_year := DATE_PART($$year$$, NEW.date);
			cur_warrant_id := NEW.reference_document_id;
		     SELECT SUM(amount) INTO cur_amount_paid_before
				FROM pay_payment_order
				WHERE reference_document_id=cur_warrant_id
				 AND status_id=$$EXECUTED$$
				 AND DATE_PART($$year$$, date) < cur_year
			    GROUP BY reference_document_id;
			 SELECT amount INTO cur_total_amount
			 FROM pay_reference_document WHERE id = cur_warrant_id;
		     cur_annual_amount_to_pay := COALESCE(cur_total_amount, 0) - COALESCE(cur_amount_paid_before, 0);
		     SELECT SUM(amount) INTO cur_annual_amount_paid
				FROM pay_payment_order
				WHERE reference_document_id=cur_warrant_id
				 AND status_id=$$EXECUTED$$
				 AND DATE_PART($$year$$, date) = cur_year
				GROUP BY reference_document_id;
			cur_annual_amount_paid := COALESCE(cur_annual_amount_paid, 0);
			cur_annual_amount_left := cur_annual_amount_to_pay - cur_annual_amount_paid;
			cur_is_split := NOT(cur_total_amount=cur_annual_amount_to_pay AND cur_annual_amount_left=0);
			cur_no := CASE
				WHEN (select count(*) from gtp_annual_warrant where fiscal_year=cur_year and is_split=cur_is_split) = 0 THEN 1
				ELSE (select no from gtp_annual_warrant where fiscal_year=cur_year and is_split=cur_is_split order by no desc limit 1) + 1
			END;
			IF EXISTS (
				SELECT * FROM gtp_annual_warrant
				WHERE id = cur_warrant_id AND fiscal_year = cur_year
			) THEN
				UPDATE gtp_annual_warrant
				SET annual_amount_to_pay=cur_annual_amount_to_pay,
					annual_amount_paid=cur_annual_amount_paid,
					annual_amount_left=cur_annual_amount_left,
					is_split=cur_is_split
				WHERE id = cur_warrant_id AND fiscal_year = cur_year;
			ELSE
				INSERT INTO gtp_annual_warrant(
					id, fiscal_year, annual_amount_to_pay,
					annual_amount_paid, annual_amount_left, is_split, no
				) VALUES (
					cur_warrant_id,
					cur_year,
					cur_annual_amount_to_pay,
					cur_annual_amount_paid,
					cur_annual_amount_left,
					cur_is_split,
					cur_no
				);
			END IF;
			DELETE FROM gtp_annual_warrant
			WHERE id = cur_warrant_id
				AND fiscal_year = cur_year
				AND annual_amount_paid = 0;
			RETURN NEW;
		END;
		'
		LANGUAGE plpgsql;
		]]>

      CREATE TRIGGER gtp_tri_update_annual_warrant AFTER INSERT OR UPDATE OR DELETE ON pay_payment_order
        FOR EACH ROW EXECUTE FUNCTION gtp_func_update_annual_warrant();
    </sql>
  </changeSet>
</databaseChangeLog>
